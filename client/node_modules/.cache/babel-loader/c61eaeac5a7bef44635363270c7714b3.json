{"ast":null,"code":"import DataService from \"../../services/DataService\";\nimport BarChart from \"./BarChart.vue\";\nimport LineChart from \"./LineChart.vue\";\nexport default {\n  name: \"FuturoComponent\",\n  components: {\n    BarChart,\n    LineChart\n  },\n\n  data() {\n    return {\n      checkedInvestimentos: [],\n      tempoInvestimento: \"\",\n      investimentoInicial: \"\",\n      montante: {},\n      juros: {},\n      imposto: {},\n      barChartData: {\n        //   labels: [],\n        datasets: []\n      },\n      lineChartData: {\n        labels: [],\n        datasets: []\n      },\n      // chartOptions:\n      notSubmitted: true,\n      loaded: false,\n      flagTabela: false,\n      flagLinha: false,\n      flagBarras: true,\n      isActiveBarra: \"\",\n      isActiveLinha: \"\",\n      isActiveTabela: \"\",\n      notSelected: false\n    };\n  },\n\n  methods: {\n    registerInvestimento: function () {\n      //Objeto com as cores de cada investimento\n      let backgorundColorSet = {\n        CDB: '#648FFF',\n        //'yellow',\n        LCI: '#785EF0',\n        //'red',\n        LCA: '#DC267F',\n        //'green',\n        TesouroIPCA: '#FE6100',\n        //'brown',\n        'Tesouro IPCA': '#FE6100',\n        //'brown',\n        TesouroSelic: '#FFB000',\n        //'blue',\n        'Tesouro Selic': '#FFB000' //'blue'\n\n      };\n\n      if (this.checkedInvestimentos === \"\") {\n        this.notSelected = true;\n      } else {\n        this.notSelected = false;\n      } //Salvando os dados da simulação em um objeto\n\n\n      let dados = {\n        tempoInvestimento: this.tempoInvestimento,\n        investimentoInicial: this.investimentoInicial,\n        checkedInvestimentos: this.checkedInvestimentos\n      }; //Enviando os dados da simulação para o backend, processando a resposta e colocando nos dados do gráfico\n\n      DataService.createFuturo(dados).then(response => {\n        let datasetBarra = {\n          label: '',\n          backgroundColor: \"\",\n          data: {}\n        };\n        let k = 0;\n        let datasetLinha = {\n          label: '',\n          borderColor: '',\n          backgroundColor: \"\"\n        };\n        let j = 0;\n        let data = new Array(); //Salvando os dados para o gráfico de barras e para a tabela\n\n        for (const key in response.data.Montantes) {\n          this.montante[key] = response.data.Montantes[key];\n          this.juros[key] = response.data.Juros[key];\n          this.imposto[key] = response.data.Imposto[key];\n          datasetBarra.label = this.checkedInvestimentos[k];\n          datasetBarra.backgroundColor = backgorundColorSet[key];\n          datasetBarra.data[datasetBarra.label] = parseFloat(response.data.Montantes[key]);\n          this.barChartData.datasets.push(datasetBarra);\n          datasetBarra = {\n            label: '',\n            backgroundColor: \"\",\n            data: {}\n          };\n          k = k + 1;\n        }\n        /*Salvando os dados dos juros\r\n         for(const key in response.data.Juros){\r\n          this.juros[key] = response.data.Juros[key];\r\n         }*/\n        //Salvando os dados para o gráfico de linhas\n\n\n        for (let i = 0; i < response.data.Evolucao.length; i++) {\n          if (i === 0) data.push(response.data.Evolucao[i]);else if (response.data.Evolucao[i] == this.investimentoInicial) {\n            datasetLinha.label = this.checkedInvestimentos[j];\n            datasetLinha.borderColor = backgorundColorSet[this.checkedInvestimentos[j]];\n            datasetLinha.backgroundColor = backgorundColorSet[this.checkedInvestimentos[j]];\n            datasetLinha['data'] = data;\n            this.lineChartData.datasets.push(datasetLinha);\n            datasetLinha = {\n              label: '',\n              borderColor: '',\n              backgroundColor: \"\"\n            };\n            data = new Array();\n            data.push(response.data.Evolucao[i]);\n            j++;\n          } else data.push(response.data.Evolucao[i]);\n\n          if (i === response.data.Evolucao.length - 1) {\n            datasetLinha.label = this.checkedInvestimentos[j];\n            datasetLinha.borderColor = backgorundColorSet[this.checkedInvestimentos[j]];\n            datasetLinha.backgroundColor = backgorundColorSet[this.checkedInvestimentos[j]];\n            datasetLinha['data'] = data;\n            this.lineChartData.datasets.push(datasetLinha);\n          }\n        }\n\n        for (let i = 0; i <= parseInt(this.tempoInvestimento); i++) {\n          this.lineChartData.labels.push(i);\n        }\n\n        this.clearForm();\n        this.showResultados();\n      }).catch(error => {\n        console.log(error.message);\n      });\n    },\n    showResultados: function () {\n      this.showBarra();\n      this.notSubmitted = false;\n      this.loaded = true;\n    },\n    clearForm: function () {\n      this.checkedInvestimentos = [];\n      this.tempoInvestimento = \"\";\n      this.investimentoInicial = \"\";\n    },\n    showBarra: function () {\n      this.flagBarras = true;\n      this.flagLinha = false;\n      this.flagTabela = false;\n      this.isActiveBarra = \"active\";\n      this.isActiveLinha = \"\";\n      this.isActiveTabela = \"\";\n    },\n    showTabela: function () {\n      this.flagBarras = false;\n      this.flagLinha = false;\n      this.flagTabela = true;\n      this.isActiveBarra = \"\";\n      this.isActiveLinha = \"\";\n      this.isActiveTabela = \"active\";\n    },\n    showLinha: function () {\n      this.flagBarras = false;\n      this.flagLinha = true;\n      this.flagTabela = false;\n      this.isActiveBarra = \"\";\n      this.isActiveLinha = \"active\";\n      this.isActiveTabela = \"\";\n    },\n    clearData: function () {\n      this.barChartData.datasets = []; // Resetando os dados do gráfico de barras\n\n      this.lineChartData.datasets = []; // Resetando os dados do gráfico de linhas\n\n      this.lineChartData.labels = []; //  Resetando os dados das labels do gráfico de linhas\n      //Resetando os dados usados na tabela\n\n      this.montante = {};\n      this.juros = {};\n      this.imposto = {};\n      this.notSubmitted = !this.notSubmitted;\n    },\n    printResult: function () {\n      window.print();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["DataService","BarChart","LineChart","name","components","data","checkedInvestimentos","tempoInvestimento","investimentoInicial","montante","juros","imposto","barChartData","datasets","lineChartData","labels","notSubmitted","loaded","flagTabela","flagLinha","flagBarras","isActiveBarra","isActiveLinha","isActiveTabela","notSelected","methods","registerInvestimento","backgorundColorSet","CDB","LCI","LCA","TesouroIPCA","TesouroSelic","dados","createFuturo","then","response","datasetBarra","label","backgroundColor","k","datasetLinha","borderColor","j","Array","key","Montantes","Juros","Imposto","parseFloat","push","i","Evolucao","length","parseInt","clearForm","showResultados","catch","error","console","log","message","showBarra","showTabela","showLinha","clearData","printResult","window","print"],"sourceRoot":"","sources":["C:\\Users\\mathe\\Desktop\\Node-JS\\SimRendaFixa\\sim-renda-fixa-app\\client\\src\\components\\FuturoComponent.vue"],"sourcesContent":["<template>\r\n<div class=\"futuro\">\r\n        <h3>Instruções</h3>\r\n        <p>\r\n          Neste módulo, é possível simular um ou mais investimentos de renda fixa projetados para uma data futura a partir data presente.\r\n          Inicialmente, selecione os investimentos a serem simulados atráves das caixas de seleção.\r\n          Após isso, insira o prazo do investimento e o valor do investimento inicial.\r\n          Por fim, clique no botão \"Simular Futuro\" para realizar a simulação.\r\n        </p>\r\n      <!-- Div do formulário -->\r\n      <div v-if=\"notSubmitted\" id=\"formulario\">\r\n        <form  @submit.prevent=\"registerInvestimento\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"investimentos\" class=\"form-label\"><strong>Selecione os investimentos a serem simulados:</strong></label>\r\n          </div>\r\n          <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"cdb\" id=\"cdb\" class=\"form-check-input\" value=\"CDB\" v-model=\"checkedInvestimentos\">\r\n            <label for=\"cdb\">CDB</label>\r\n          </div>\r\n          <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"lci\" id=\"lci\" class=\"form-check-input\" value=\"LCI\" v-model=\"checkedInvestimentos\">\r\n            <label for=\"lci\">LCI</label>\r\n          </div>\r\n          <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"lca\" id=\"lca\" class=\"form-check-input\" value=\"LCA\" v-model=\"checkedInvestimentos\">\r\n            <label for=\"lca\">LCA</label>\r\n          </div>\r\n          <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"tesouro_ipca\" id=\"tesouro-ipca\" value=\"Tesouro IPCA\" class=\"form-check-input\" v-model=\"checkedInvestimentos\">\r\n            <label for=\"tesouro-ipca\">Tesouro IPCA</label>\r\n          </div>\r\n          <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"tesouro_selic\" id=\"tesouro-selic\" class=\"form-check-input\" value=\"Tesouro Selic\" v-model=\"checkedInvestimentos\">\r\n            <label label for=\"tesouro-selic\">Tesouro Selic</label>\r\n          </div>\r\n           <br>\r\n          <div class=\"mb-3\">\r\n             <label for=\"tempo\" class=\"form-label\"><strong>Qual o tempo do investimento em meses?</strong></label><br>\r\n            <input type=\"number\" name=\"tempo\" id=\"tempo\" min=\"1\" max=\"60\" alt=\"Insira um inteiro entre 1 e 60\" placeholder=\"Número entre 1 e 60\" v-model.number=\"tempoInvestimento\" required>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label for=\"investimento-inicial\" class=\"form-label\"><strong>Qual o valor do investimento inicial?</strong></label><br>\r\n            <input type=\"number\" name=\"investimento-inicial\" id=\"investimento-inicial\" min=\"1\" v-model.number=\"investimentoInicial\" required>\r\n          </div>\r\n          <button class=\"btn btn-primary\"><span class=\"bi-check-circle\"></span> Simular Futuro</button>\r\n        </form>\r\n        <br>\r\n        <p><strong>Isenções de responsabilidade</strong></p>\r\n        <p>\r\n        Os resultados das simulações realizadas neste app tem caráter meramente educativo, sendo sua utilização optativa. \r\n        O autor não se responsabiliza por eventuais danos ou prejuízos que venham a ser causados ao usuário, ou qualquer terceiro, \r\n        pela tomada de decisão com base na utilização do app, assumindo, neste caso, o próprio usuário que dele fizer uso, a integral \r\n        e exclusiva responsabilidade.\r\n        </p>\r\n<p><strong>Rentabilidade passada não garante rentabilidade futura!</strong></p>\r\n    </div>\r\n    <!-- Div dos resultados -->\r\n    <div v-else class=\"resultados\">\r\n      <div v-if=\"loaded\" class=\"resultados\" id=\"carregados\">\r\n      <!-- Tab de selecionar o modo de exibição dos resultados -->\r\n        <nav>\r\n          <ul class=\"nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\r\n            <li class=\"nav-item\" role=\"presentation\">\r\n              <button class=\"nav-link\" :class=\"{'active': isActiveBarra}\" @click=\"showBarra\" id=\"pills-home-tab\" type=\"button\" role=\"tab\">Gráfico de barras</button>\r\n            </li>\r\n          <li class=\"nav-item\" role=\"presentation\">\r\n            <button class=\"nav-link\" :class=\"{'active': isActiveLinha}\" @click=\"showLinha\" id=\"pills-profile-tab\" type=\"button\" role=\"tab\">Gráfico de linhas</button>\r\n          </li>\r\n          <li class=\"nav-item\" role=\"presentation\">\r\n            <button class=\"nav-link\" :class=\"{'active': isActiveTabela}\" @click=\"showTabela\" id=\"pills-contact-tab\" type=\"button\" role=\"tab\">Tabela</button>\r\n          </li>\r\n          </ul>\r\n        </nav>\r\n        <!-- Div da tabela -->\r\n        <div v-if=\"flagTabela\" class=\"tabela\">\r\n          <table class=\"table table-striped table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Investimento</th>\r\n                    <th>Juros</th>\r\n                    <th>Imposto</th>\r\n                    <th>Valor Final</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(value, key) in montante\" :key=\"key\">\r\n                    <td> {{ key }}</td>\r\n                    <td>{{juros[key]}}</td>\r\n                    <td>{{imposto[key]}}</td>\r\n                    <td>{{ value }}</td>\r\n                </tr>\r\n            </tbody>\r\n          </table>\r\n          \r\n\r\n        </div>\r\n        <!-- Div do gráfico de barras -->\r\n        <div v-if=\"flagBarras\"  class=\"chart-container\">\r\n        <div class=\"chart\">\r\n          <BarChart :chart-data=\"barChartData\"/>\r\n        </div>\r\n          \r\n        </div>\r\n        <!-- Div do gráfico de linhas -->\r\n        <div v-if=\"flagLinha\" class=\"chart-container\">\r\n        <div class=\"chart\">\r\n          <LineChart :chart-data=\"lineChartData\"/>\r\n        </div>\r\n          <strong></strong>\r\n        </div>\r\n        <br>\r\n        <div id=\"fonte-dados\">\r\n          <p>\r\n            Para a realização desta simulação foram usadas as seguintes fontes: para o CDB, Tesouro IPCA e Tesouro SELIC \r\n            foram usados os dados do <strong>Boletim da renda fixa da ANBIMA</strong>, disponível\r\n            em: <a href=\"https://www.anbima.com.br/pt_br/informar/relatorios/renda-fixa-tesouraria/boletim-renda-fixa/boletim-renda-fixa.htm\" target=\"_blank\">Boletim Renda Fixa</a>\r\n            e para a LCI/LCA foi considerado um rendimento de 98% do CDI, sendo o valor deste obtido da <strong>Série Temporal Taxa de juros - CDI acumulada no mês</strong> \r\n            do Banco Central do Brasil, disponível em: <a href=\"https://www3.bcb.gov.br/sgspub/localizarseries/localizarSeries.do?method=prepararTelaLocalizarSeries\" target=\"_blank\">SGS - Sistema Gerenciador de Séries Temporais</a> sob o código de número 4391.\r\n          </p>\r\n        </div>\r\n        <div id=\"botoes-nova-pdf\">\r\n        <div class=\"inner\">\r\n            <button id=\"nova-simulacao\" class=\"btn btn-primary\" @click=\"clearData\">Nova Simulação</button>\r\n        </div>\r\n        <div class=\"inner\">\r\n            <button id=\"gerar-pdf\" class=\"btn btn-success\" @click=\"printResult\">Imprimir</button>\r\n        </div> \r\n      </div>\r\n    </div>\r\n </div>    \r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport DataService from \"../../services/DataService\"\r\nimport BarChart from \"./BarChart.vue\";\r\nimport LineChart from \"./LineChart.vue\";\r\n\r\n\r\nexport default {\r\n    name: \"FuturoComponent\",\r\n    components: {  BarChart, LineChart },\r\n    data() {\r\n        return {\r\n            checkedInvestimentos: [],\r\n            tempoInvestimento: \"\",\r\n            investimentoInicial: \"\",\r\n            montante:{},\r\n            juros:{},\r\n            imposto: {},\r\n            barChartData: {\r\n                           //   labels: [],\r\n                              datasets: []\r\n                          },\r\n\r\n\r\n           lineChartData: {\r\n                                labels: [],\r\n                                datasets: []\r\n                          },\r\n           // chartOptions:\r\n\r\n            notSubmitted: true,\r\n            loaded: false,\r\n            flagTabela: false,\r\n            flagLinha: false,\r\n            flagBarras: true,\r\n            isActiveBarra: \"\",\r\n            isActiveLinha: \"\",\r\n            isActiveTabela: \"\",\r\n            notSelected: false\r\n        };\r\n    },\r\n    methods: {\r\n        registerInvestimento: function () {\r\n\r\n            //Objeto com as cores de cada investimento\r\n            let backgorundColorSet =\r\n            {\r\n                      CDB: '#648FFF',//'yellow',\r\n                      LCI: '#785EF0',//'red',\r\n                      LCA: '#DC267F',//'green',\r\n                      TesouroIPCA: '#FE6100', //'brown',\r\n                      'Tesouro IPCA': '#FE6100',  //'brown',\r\n                      TesouroSelic: '#FFB000', //'blue',\r\n                      'Tesouro Selic': '#FFB000' //'blue'\r\n            }\r\n\r\n          if(this.checkedInvestimentos ===\"\"){\r\n            this.notSelected = true;\r\n          }else{\r\n            this.notSelected = false;\r\n          }\r\n\r\n\r\n           //Salvando os dados da simulação em um objeto\r\n           let dados = {\r\n                          tempoInvestimento: this.tempoInvestimento,\r\n                          investimentoInicial: this.investimentoInicial,\r\n                          checkedInvestimentos: this.checkedInvestimentos\r\n            };\r\n\r\n            //Enviando os dados da simulação para o backend, processando a resposta e colocando nos dados do gráfico\r\n            DataService.createFuturo(dados)\r\n            .then(response =>  {\r\n\r\n              let datasetBarra = {label:'',backgroundColor:\"\", data:{}};\r\n              let k = 0;\r\n              let datasetLinha = {label:'', borderColor:'',backgroundColor:\"\"};\r\n              let j = 0;\r\n              let data = new Array();\r\n\r\n\r\n              //Salvando os dados para o gráfico de barras e para a tabela\r\n              for(const key in response.data.Montantes){\r\n\r\n                  this.montante[key] = response.data.Montantes[key];\r\n                  this.juros[key] = response.data.Juros[key];\r\n                  this.imposto[key] = response.data.Imposto[key];\r\n\r\n                  datasetBarra.label = this.checkedInvestimentos[k];\r\n                  datasetBarra.backgroundColor = backgorundColorSet[key];\r\n                  datasetBarra.data[datasetBarra.label] = parseFloat(response.data.Montantes[key]);\r\n                  this.barChartData.datasets.push(datasetBarra);\r\n                  datasetBarra = {label:'',backgroundColor:\"\", data:{}};\r\n                  k = k + 1;\r\n               }\r\n\r\n              /*Salvando os dados dos juros\r\n               for(const key in response.data.Juros){\r\n                this.juros[key] = response.data.Juros[key];\r\n               }*/\r\n\r\n              //Salvando os dados para o gráfico de linhas\r\n               for(let i = 0; i < response.data.Evolucao.length; i++ ){   \r\n                if(i === 0)\r\n                  data.push(response.data.Evolucao[i]);\r\n                else if(response.data.Evolucao[i] == this.investimentoInicial){\r\n                  datasetLinha.label = this.checkedInvestimentos[j];\r\n                  datasetLinha.borderColor = backgorundColorSet[this.checkedInvestimentos[j]];\r\n                  datasetLinha.backgroundColor = backgorundColorSet[this.checkedInvestimentos[j]];\r\n                  datasetLinha['data'] = data;\r\n                  this.lineChartData.datasets.push(datasetLinha);\r\n                  datasetLinha = {label:'', borderColor:'',backgroundColor:\"\"};\r\n                  data = new Array();\r\n                  data.push(response.data.Evolucao[i]);\r\n                  j++;\r\n                }\r\n                else\r\n                  data.push(response.data.Evolucao[i]);\r\n                if(i === response.data.Evolucao.length-1){\r\n                  datasetLinha.label = this.checkedInvestimentos[j];\r\n                  datasetLinha.borderColor = backgorundColorSet[this.checkedInvestimentos[j]];\r\n                  datasetLinha.backgroundColor = backgorundColorSet[this.checkedInvestimentos[j]];\r\n                  datasetLinha['data'] = data;\r\n                  this.lineChartData.datasets.push(datasetLinha);\r\n                }\r\n                \r\n               }\r\n\r\n               for(let i = 0; i <= parseInt(this.tempoInvestimento); i++){\r\n                this.lineChartData.labels.push(i);\r\n               }\r\n\r\n              \r\n              this.clearForm();\r\n              this.showResultados();\r\n        })\r\n          .catch(error => {\r\n          console.log(error.message);\r\n         });\r\n        },\r\n\r\n    showResultados: function(){\r\n              this.showBarra();\r\n              this.notSubmitted = false;\r\n              this.loaded = true;\r\n        },\r\n    clearForm: function() {\r\n       this.checkedInvestimentos = [];\r\n        this.tempoInvestimento = \"\";\r\n        this.investimentoInicial = \"\";\r\n    },\r\n    showBarra: function(){\r\n      this.flagBarras = true;\r\n      this.flagLinha = false;\r\n      this.flagTabela = false;\r\n      this.isActiveBarra =\"active\";\r\n      this.isActiveLinha=\"\";\r\n      this.isActiveTabela=\"\";\r\n    },\r\n    showTabela: function(){\r\n      this.flagBarras = false;\r\n      this.flagLinha = false;\r\n      this.flagTabela = true;\r\n      this.isActiveBarra =\"\";\r\n      this.isActiveLinha=\"\";\r\n      this.isActiveTabela=\"active\";\r\n    },\r\n    showLinha: function(){\r\n      this.flagBarras = false;\r\n      this.flagLinha = true;\r\n      this.flagTabela = false;\r\n      this.isActiveBarra =\"\";\r\n      this.isActiveLinha=\"active\";\r\n      this.isActiveTabela=\"\";\r\n    },\r\n    clearData: function(){\r\n\r\n          this.barChartData.datasets = []; // Resetando os dados do gráfico de barras\r\n\r\n          this.lineChartData.datasets = [];// Resetando os dados do gráfico de linhas\r\n          this.lineChartData.labels = [];//  Resetando os dados das labels do gráfico de linhas\r\n\r\n          //Resetando os dados usados na tabela\r\n          this.montante = {};\r\n          this.juros = {};\r\n          this.imposto = {};\r\n\r\n          this.notSubmitted = !this.notSubmitted;\r\n    },\r\n    printResult: function(){\r\n      window.print();\r\n    }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Chrome, Safari, Edge, Opera */\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n/* Firefox */\r\ninput[type=number] {\r\n  -moz-appearance: textfield;\r\n}\r\n\r\n.chart-container {\r\n  margin-top: 10px;\r\n  max-height: 400px;\r\n  max-width: 450px;\r\n  display: flex;\r\n}\r\n\r\n#nova-simulacao,#gerar-pdf{\r\n  margin-top: 10px;\r\n  margin-right: 50px;\r\n}\r\n\r\n#tempo{\r\n  width: 202.4px;\r\n}\r\n\r\n#botoes-nova-pdf\r\n{\r\n    width:100%;\r\n    text-align: center;\r\n}\r\n.inner\r\n{\r\n    display: inline-block;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}