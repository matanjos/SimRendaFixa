{"ast":null,"code":"import DataService from \"../../services/DataService\";\nimport BarChart from \"./BarChart.vue\";\nexport default {\n  name: \"FuturoComponent\",\n  components: {\n    BarChart\n  },\n\n  data() {\n    return {\n      checkedInvestimentos: [],\n      tempoInvestimento: \"\",\n      investimentoInicial: \"\",\n      montante: \"\",\n      chartData: {\n        labels: [],\n        datasets: [{\n          label: [],\n          backgroundColor: [],\n          data: []\n        }]\n      },\n      //chartOptions:,\n      notSubmitted: true,\n      loaded: false\n    };\n  },\n\n  methods: {\n    registerInvestimento: function () {\n      this.chartData.datasets[0].data = []; // Resetando os dados do gráfico\n\n      let backgorundColorSet = {\n        CDB: 'yellow',\n        LCI: 'red',\n        LCA: 'green',\n        TesouroIPCA: 'brown',\n        TesouroSelic: 'blue'\n      }; //Salvando os dados da simulação em um objeto\n\n      let dados = {\n        tempoInvestimento: this.tempoInvestimento,\n        investimentoInicial: this.investimentoInicial,\n        checkedInvestimentos: this.checkedInvestimentos\n      }; //Enviando os dados da simulação para o backend, processando a resposta e colocando nos dados do gráfico\n\n      DataService.create(dados).then(response => {\n        this.chartData.labels = this.checkedInvestimentos;\n        this.chartData.datasets[0].label = this.checkedInvestimentos;\n\n        for (const key in response.data) {\n          this.chartData.datasets[0].data.push(response.data[key]);\n          this.chartData.datasets[0].backgroundColor.push(backgorundColorSet[key]);\n        } // this.chartData.datasets[0].label = this.checkedInvestimentos;\n\n\n        this.showResultados();\n      }).catch(error => {\n        console.log(error.message);\n      });\n    },\n    showResultados: function () {\n      this.notSubmitted = false;\n      this.loaded = true;\n    }\n  }\n};","map":{"version":3,"mappings":"AA+EA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA,eAAe;EACXC,IAAI,EAAE,iBADK;EAEXC,UAAU,EAAE;IAAGF;EAAH,CAFD;;EAGXG,IAAI,GAAG;IACH,OAAO;MACHC,oBAAoB,EAAE,EADnB;MAEHC,iBAAiB,EAAE,EAFhB;MAGHC,mBAAmB,EAAE,EAHlB;MAIHC,QAAQ,EAAC,EAJN;MAKHC,SAAS,EAAE;QACCC,MAAM,EAAE,EADT;QAECC,QAAQ,EAAE,CACE;UACEC,KAAK,EAAE,EADT;UAEEC,eAAe,EAAE,EAFnB;UAGET,IAAI,EAAE;QAHR,CADF;MAFX,CALR;MAeH;MACAU,YAAY,EAAE,IAhBX;MAiBHC,MAAM,EAAE;IAjBL,CAAP;EAmBH,CAvBU;;EAwBXC,OAAO,EAAE;IACLC,oBAAoB,EAAE,YAAY;MAC/B,KAAKR,SAAL,CAAeE,QAAf,CAAwB,CAAxB,EAA2BP,IAA3B,GAAkC,EAAlC,CAD+B,CACO;;MACrC,IAAIc,kBAAiB,GACrB;QACUC,GAAG,EAAE,QADf;QAEUC,GAAG,EAAE,KAFf;QAGUC,GAAG,EAAE,OAHf;QAIUC,WAAW,EAAE,OAJvB;QAKUC,YAAY,EAAE;MALxB,CADA,CAF8B,CAU/B;;MACA,IAAIC,KAAI,GAAI;QACTlB,iBAAiB,EAAE,KAAKA,iBADf;QAETC,mBAAmB,EAAE,KAAKA,mBAFjB;QAGTF,oBAAoB,EAAE,KAAKA;MAHlB,CAAZ,CAX+B,CAiB9B;;MACAL,WAAW,CAACyB,MAAZ,CAAmBD,KAAnB,EACCE,IADD,CACMC,QAAO,IAAM;QACjB,KAAKlB,SAAL,CAAeC,MAAf,GAAwB,KAAKL,oBAA7B;QACA,KAAKI,SAAL,CAAeE,QAAf,CAAwB,CAAxB,EAA2BC,KAA3B,GAAmC,KAAKP,oBAAxC;;QACA,KAAI,MAAMuB,GAAV,IAAiBD,QAAQ,CAACvB,IAA1B,EAA+B;UAC3B,KAAKK,SAAL,CAAeE,QAAf,CAAwB,CAAxB,EAA2BP,IAA3B,CAAgCyB,IAAhC,CAAqCF,QAAQ,CAACvB,IAAT,CAAcwB,GAAd,CAArC;UACA,KAAKnB,SAAL,CAAeE,QAAf,CAAwB,CAAxB,EAA2BE,eAA3B,CAA2CgB,IAA3C,CAAgDX,kBAAkB,CAACU,GAAD,CAAlE;QACH,CANgB,CAOlB;;;QACC,KAAKE,cAAL;MACA,CAVF,EAWDC,KAXC,CAWKC,KAAI,IAAK;QAChBC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;MACA,CAbE;IAcH,CAjCI;IAmCLL,cAAc,EAAE,YAAU;MACpB,KAAKhB,YAAL,GAAoB,KAApB;MACA,KAAKC,MAAL,GAAc,IAAd;IACN;EAtCK;AAxBE,CAAf","names":["DataService","BarChart","name","components","data","checkedInvestimentos","tempoInvestimento","investimentoInicial","montante","chartData","labels","datasets","label","backgroundColor","notSubmitted","loaded","methods","registerInvestimento","backgorundColorSet","CDB","LCI","LCA","TesouroIPCA","TesouroSelic","dados","create","then","response","key","push","showResultados","catch","error","console","log","message"],"sourceRoot":"","sources":["C:\\Users\\mathe\\Desktop\\Node-JS\\SimRendaFixa\\sim-renda-fixa-app\\src\\components\\FuturoComponent.vue"],"sourcesContent":["<template>\r\n<div class=\"futuro\">\r\n        <p>\r\n          Neste módulo, é possível simular um ou mais investimentos de renda fixa projetados para uma data futura a partir data presente.\r\n          Inicialmente, selecione os investimentos a serem simulados atráves das caixas de seleção.\r\n          Após isso, insira o prazo do investimento e o valor do investimento inicial.\r\n          Por fim, clique no botão \"Simular Futuro\" para realizar a simulação.\r\n        </p>\r\n      <div v-if=\"notSubmitted\">\r\n        <form  @submit.prevent=\"registerInvestimento\">\r\n        <div class=\"mb-3\">\r\n            <label for=\"investimentos\" class=\"form-label\">Selecione os investimentos a serem simulados:</label>\r\n        </div>\r\n        <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"cdb\" id=\"cdb\" class=\"form-check-input\" value=\"CDB\" v-model=\"checkedInvestimentos\">\r\n            <label for=\"cdb\">CDB</label>\r\n        </div>\r\n        <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"lci\" id=\"lci\" class=\"form-check-input\" value=\"LCI\" v-model=\"checkedInvestimentos\">\r\n            <label for=\"lci\">LCI</label>\r\n        </div>\r\n        <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"lca\" id=\"lca\" class=\"form-check-input\" value=\"LCA\" v-model=\"checkedInvestimentos\">\r\n            <label for=\"lca\">LCA</label>\r\n        </div>\r\n        <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"tesouro_ipca\" id=\"tesouro-ipca\" value=\"Tesouro IPCA\" class=\"form-check-input\" v-model=\"checkedInvestimentos\">\r\n            <label for=\"tesouro-ipca\">Tesouro IPCA</label>\r\n        </div>\r\n        <div class=\"mb-3 form-check form-check-inline\">\r\n            <input type=\"checkbox\" name=\"tesouro_selic\" id=\"tesouro-selic\" class=\"form-check-input\" value=\"Tesouro Selic\" v-model=\"checkedInvestimentos\">\r\n            <label label for=\"tesouro-selic\">Tesouro Selic</label>\r\n        </div>\r\n           <br>\r\n           <span>Investimentos selecionados: {{ checkedInvestimentos }}</span>\r\n        <div class=\"mb-3\">\r\n             <label for=\"tempo\" class=\"form-label\">Qual o tempo do investimento em meses?</label><br>\r\n            <input type=\"number\" name=\"tempo\" id=\"tempo\" min=\"0\" v-model.number=\"tempoInvestimento\">\r\n            <p>O tempo de investimento é: {{ tempoInvestimento }}</p>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <label for=\"investimento-inicial\" class=\"form-label\">Qual o valor do investimento inicial? </label><br>\r\n            <input type=\"number\" name=\"investimento-inicial\" id=\"investimento-inicial\" min=\"0\" v-model.number=\"investimentoInicial\">\r\n            <p>O investimento inicial é: {{ investimentoInicial }}</p>\r\n        </div>\r\n        <button class=\"btn btn-primary\"><span class=\"bi-check-circle\"></span> Simular Futuro</button>\r\n        <p>O valor de notSubmitted é: {{ notSubmitted }}</p>\r\n     </form>\r\n    </div>\r\n    <div v-else>\r\n      <!-- <div id=\"trocar-tabela-grafico\" >\r\n\r\n      </div>\r\n       <table class=\"table table-striped table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Investimento</th>\r\n                    <th>Montante</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(value, key) in montante\" :key=\"key\">\r\n                    <td> {{ key }}</td>\r\n                    <td>{{ value }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>-->\r\n        <div v-if=\"loaded\" class=\"chart-container\">\r\n          <BarChart v-if=\"loaded\" :chart-data=\"chartData\"/>\r\n        </div>\r\n        <div id=\"nova-simulacao\">\r\n            <button class=\"btn btn-primary\" @click=\"notSubmitted = !notSubmitted\">Nova Simulação</button>\r\n        </div>\r\n     </div>\r\n     \r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport DataService from \"../../services/DataService\"\r\nimport BarChart from \"./BarChart.vue\";\r\n\r\nexport default {\r\n    name: \"FuturoComponent\",\r\n    components: {  BarChart },\r\n    data() {\r\n        return {\r\n            checkedInvestimentos: [],\r\n            tempoInvestimento: \"\",\r\n            investimentoInicial: \"\",\r\n            montante:\"\",\r\n            chartData: {\r\n                        labels: [],\r\n                        datasets: [\r\n                                    {\r\n                                      label: [],\r\n                                      backgroundColor: [],\r\n                                      data: []\r\n          }\r\n                        ]\r\n                        },\r\n            //chartOptions:,\r\n            notSubmitted: true,\r\n            loaded: false\r\n        };\r\n    },\r\n    methods: {\r\n        registerInvestimento: function () {\r\n           this.chartData.datasets[0].data = []; // Resetando os dados do gráfico\r\n            let backgorundColorSet =\r\n            {\r\n                      CDB: 'yellow',\r\n                      LCI: 'red',\r\n                      LCA: 'green',\r\n                      TesouroIPCA: 'brown',\r\n                      TesouroSelic: 'blue'\r\n            }\r\n           //Salvando os dados da simulação em um objeto\r\n           let dados = {\r\n              tempoInvestimento: this.tempoInvestimento,\r\n              investimentoInicial: this.investimentoInicial,\r\n              checkedInvestimentos: this.checkedInvestimentos\r\n            };\r\n\r\n            //Enviando os dados da simulação para o backend, processando a resposta e colocando nos dados do gráfico\r\n            DataService.create(dados)\r\n            .then(response =>  {\r\n              this.chartData.labels = this.checkedInvestimentos;\r\n              this.chartData.datasets[0].label = this.checkedInvestimentos;\r\n              for(const key in response.data){\r\n                  this.chartData.datasets[0].data.push(response.data[key]);\r\n                  this.chartData.datasets[0].backgroundColor.push(backgorundColorSet[key])\r\n               }\r\n             // this.chartData.datasets[0].label = this.checkedInvestimentos;\r\n              this.showResultados();\r\n             })\r\n          .catch(error => {\r\n          console.log(error.message);\r\n         });\r\n        },\r\n\r\n        showResultados: function(){\r\n              this.notSubmitted = false;\r\n              this.loaded = true;\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Chrome, Safari, Edge, Opera */\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n/* Firefox */\r\ninput[type=number] {\r\n  -moz-appearance: textfield;\r\n}\r\n\r\n.chart-container {\r\n  max-height: 380px;\r\n  max-width: 400px;\r\n  align-items: center;\r\n  display: flex;\r\n}\r\n\r\n#nova-simulacao{\r\n  margin-top: 10px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}